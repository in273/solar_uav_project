## this is the first draft of psuedocode that should describe
## the operation of the uav. as iterations go on, this code
## will become more and more specific and detailed.


class location(self, coordinates, height):
    self.coords = coordinates
    self.height = height
    def get_power_gain(self):
        fetch sunlight estimate for self.time
        calculate power_gain estimate
        return power_gain
    def get_time_taken(self):
        calculate speed, taking into account weather estimates
        calculate time taken to pass through location
        return location
    def set_time(self, time):
        self.time = time


class path(self, instructions):
    self.path = array(instructions)
    def get_power_gain(self):
        power_gain = 0
        for location in self.path:
            power_gain += location.get_power_gain()
        return power_gain
    def get_highest_threat_level(self):
        highest_threat_level = very low
        for location in self.path:
            threat_level = location.get_threat_level()
            if threat_level > highest_threat_level:
                highest_threat_level = threat_level
        return highest_threat_level
    def get_time_taken(self, time):
        time_taken = 0
        for location in self.path:
            time_taken += location.get_time_taken()
        return time_taken


def plane_launch():
    check landing gear is engaged
    start engines
    gain altitude
    disengage landing gear


def get_power_level():
    fetch power_level
    return power_level


def get_time():
    fetch current_time, current_date
    return current_time, current_date


def scout_light():
    fetch sunset and sunrise times
    calculate length_of_day
    calculate length_of_night
    return length_of_day, length_of_night


def scout_path_weather():
    fetch weather data for current outlined path
    if weather_threat high:
        return danger
    else:
        return weather        


def scout_alternate_path_weather(power_level):
    fetch weather data for surrounding area within a day's reach
    determine weather_threat for each unit of area
    attempt to find alternate_path using simple square-to-square algorithm
    ## a square-to-square algorithm might look at all surrounding areas, pick the one with best sunlight based on forecast, then perform the same check from the next square, and so on. This is just an idea and there are almost definitely better ways of doing this--take this algorithm as a placeholder.
    if not successful, use brute force algorithm, excluding paths that have already been assessed
    ## both of these algorithms would follow a similar structure to the following from the main_loop:
    ## scout_light()
    ## get_time()
    ## calculate power_gained using sunlight, weather, and sunrise/sunset times
    ## calculate remaining_length_of_day
    ## calculate power_used during the day
    ## calculate power_left to fly during the night
    if successful:
        return alternate_path
    else:
        return NULL


def schedule_emergency_landing(power_level):
    scout_alternate_path_weather()
    locate safest landing location within reach of power_level if it exists
    if no safe landing locations exist:
        send distress signal
        emergency_landing()
    else:
        return alternate_path


def main_loop():
    get_power_level()
    if power_level critical:
        emergency_landing()
    else if power_level low:
        scout_path_weather()
        if danger:
            scout_landing_locations()
            schedule_emergency_landing(power_level)
        else:
            scout_light()
            get_time()
            calculate power_gained using sunlight, weather, and sunrise/sunset times
            calculate remaining_length_of_day
            calculate power_used during the day
            calculate power_left to fly during the night
            if power_left is not enough to fly throughout the night:
                scout_alternate_path_weather(power_level)
                if alternate_path exists:
                    alter_path()
                else:
                    schedule_emergency_landing(power_level)
            else:
                continue with current path
